package api

// AUTOGENERATED BY MOQ
// github.com/matryer/moq

// UserDaoMock is a mock implementation of UserDao.
//
//     func TestSomethingThatUsesUserDao(t *testing.T) {
//
//         // make and configure a mocked UserDao
//         mockedUserDao := &UserDaoMock{
//             isEmailIDUniqueFunc: func(email string) (bool, error) {
// 	               panic("TODO: mock out the isEmailIDUnique function")
//             },
//             saveUserFunc: func(u *UserSignUpRequest)  {
// 	               panic("TODO: mock out the saveUser function")
//             },
//         }
//
//         // TODO: use mockedUserDao in code that requires UserDao
//
//     }
type UserDaoMock struct {
	// isEmailIDUniqueFunc mocks the isEmailIDUnique function.
	isEmailIDUniqueFunc func(email string) (bool, error)
	// saveUserFunc mocks the saveUser function.
	saveUserFunc func(u *UserSignUpRequest)
}

// isEmailIDUnique calls isEmailIDUniqueFunc.
func (mock *UserDaoMock) isEmailIDUnique(email string) (bool, error) {
	if mock.isEmailIDUniqueFunc == nil {
		panic("moq: UserDaoMock.isEmailIDUniqueFunc is nil but was just called")
	}

	return mock.isEmailIDUniqueFunc(email)

}

// saveUser calls saveUserFunc.
func (mock *UserDaoMock) saveUser(u *UserSignUpRequest) {
	if mock.saveUserFunc == nil {
		panic("moq: UserDaoMock.saveUserFunc is nil but was just called")
	}

	mock.saveUserFunc(u)

}

/*
var mockedDaos = []struct {
	V MockedUserDao
}{{
	V: MockedUserDao{
		isEmailIDUniqueFunc: func(email string) (bool, error) {
			return false, nil
		},
		saveUserFunc: func(u *UserSignUpRequest) {

		},
	},
}}*/
